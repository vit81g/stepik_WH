**********************************************************************
## Уязвимость веб-приложений
**********************************************************************

***********************5.1. Введение в уровень ***********************
Скачали https://disk.yandex.ru/d/bXfeC1DM4vrUsw
из папки где находится docker-comppose 
sudo docker-compose up -d
Ждем старта сервиса
Сервис находится по адресу http://localhost:1337

## Работа с ffuf
  
# скачать fuzz.txt по адресу https://github.com/empty-jack/YAWR/tree/master 
# Web -> files_and_directories -> fuzz.txt
# https://github.com/empty-jack/YAWR/blob/master/Web/files_and_directories/fuzz.txt


└─$ ffuf -w ./fuzz.txt -u http://127.0.0.1:1337/FUZZ -fc 403  
# результат
 :: Method           : GET
 :: URL              : http://127.0.0.1:1337/FUZZ
 :: Wordlist         : FUZZ: /home/vit81/Documents/stepik/wh/fuzz.txt
 :: Follow redirects : false
 :: Calibration      : false
 :: Timeout          : 10
 :: Threads          : 40
 :: Matcher          : Response status: 200-299,301,302,307,401,403,405,500
 :: Filter           : Response status: 403
________________________________________________

%2e                     [Status: 200, Size: 32394, Words: 8943, Lines: 711, Duration: 54ms]
                        [Status: 200, Size: 32394, Words: 8943, Lines: 711, Duration: 74ms]
admin                   [Status: 301, Size: 313, Words: 20, Lines: 10, Duration: 0ms]
admin/config.php        [Status: 200, Size: 0, Words: 1, Lines: 1, Duration: 0ms]
admin/index.php         [Status: 200, Size: 2730, Words: 647, Lines: 77, Duration: 0ms]
config.php              [Status: 200, Size: 0, Words: 1, Lines: 1, Duration: 0ms]
index.php               [Status: 200, Size: 32394, Words: 8943, Lines: 711, Duration: 0ms]
:: Progress: [4107/4107] :: Job [1/1] :: 40 req/sec :: Duration: [0:00:05] :: Errors: 0 ::

Видим, что есть admin

# Обход аутентификации
Запускаем BurpSuite
Переходим в Proxy -> Intercept 
Ставим Intercept is off
Открываем Oen browser -> вводим адрес http://localhost:1337/admin
Введем несколько неправильных значений
Переходим в закладку HTTP histoty и выбираем наши неудачные попытки
ПКМ -> Send to Intruder
Переходим в закладку Intruder (рядом с Proxy)
ищим данный символ § (обычно он идет с логином, паролем и хешем, если его нет жмем Auto §)
В нашем случае три варианта, выделяем хэш и жмем кнопку Clear §. Логин и пароль должны быть с §
# Пример: username=§admin§&password=§123§
# Choose an attack type -> Cluster bomb (так как у нас два значения логин и пароль, то используем Cluster bomb с двумя параметрами. Cluster bomb сама определит количество параметров)
С закладки Positions переходим в закладку Payloads
Payload set = 1
Payload type = Simple list
Payload settings [Simplle list] в строке Add вводим admin (в нашем примере только admin, можно загрузить список из файла или вставить количество логинов)
 
Payload set = 2
Payload type = Simple list
Payload settings [Simplle list] жмем load (если есть файл, для загрузки) или paste если значения в буфере

Жмем атаку  Start attack
Анализзируем столбец Lenght - это длинна пакета в ответе, ее изменение означает, что мы подобрали правильный пароль
Login: admin
Password: q1w2e3r4

********************** 5.2 Уяззвимости обхода аутентификации (OTP key) ***************
# Обход аутентификации OTP
Запускаем BurpSuite
Переходим в Proxy -> Intercept 
Ставим Intercept is off
Открываем Oen browser -> вводим адрес http://localhost:1337/admin
Вводим Login: admin и Password: q1w2e3r4
# http://localhost:1337/admin/otp.php  
Введем несколько неправильных значений
Переходим в закладку HTTP histoty и выбираем наши неудачные попытки
ПКМ -> Send to Intruder
Переходим в закладку Intruder (рядом с Proxy)
ищим данный символ § (обычно он идет с логином, паролем и хешем, если его нет жмем Auto §)
В нашем случае OTP это один код (здесь упращено, мы заранее знаем о том что число трех значное)
Пример: OTP=§111§

Choose an attack type -> Sniper
С закладки Positions переходим в закладку Payloads
Payload set = 1
Payload type = Numbers
Payload settings [Numbers]
Type = Sequential
From 1
To 999 (так как у нас OTP три числа, количество попыток неограничено)
Step 1 (шаг 1)

Number format:
Min integer digits = 3
Max integer digits = 3

Жмем атаку  Start attack
Анализзируем столбец Lengh - отличие по длинне ответа

OTP = 807
# При хэше c72725442273587ced2f4e8db9ce5dfd
# Cookie: PHPSESSID=c72725442273587ced2f4e8db9ce5dfd
# Connection: keep-alive
# OTP=807
# 
# секретная строка в формате 32 букв и цифр) из кода страницы панели администратора.
# FLAG = 637302a3ed963d2772a9bf26c6c89a36
<!-- 637302a3ed963d2772a9bf26c6c89a36 --> (в браузере нажаьб F11, режим разработчика, закладка Elements)


******************* 5.3 Уязвимости инъекции клманд ОС ****************
Внедрим символ “;”, являющийся разделителем команд в Linux после названия процесса, и добавим в конец ещё одну команду, “ls”:
apache2; ls
    PID TTY          TIME CMD
      7 ?        00:00:01 apache2
     78 ?        00:00:00  \_ apache2
     79 ?        00:00:00  \_ apache2
     81 ?        00:00:00  \_ apache2
     83 ?        00:00:00  \_ apache2
     87 ?        00:00:00  \_ apache2
     89 ?        00:00:00  \_ apache2
     91 ?        00:00:00  \_ apache2
     93 ?        00:00:00  \_ apache2
     94 ?        00:00:00  \_ apache2
     95 ?        00:00:00  \_ apache2
.
..
config.php
footer.inc.php
header.inc.php
index.php
main.php
otp.php

Проведем базовую разведку, используя следующие команды:
    Показать текущую директорию: > pwd
    Показать текущего пользователя: > id
    Показать переменные окружения: > export

# Пример уязвимостей OS command injection
# https://www.youtube.com/watch?v=GDUadTiXXVk
# https://portswigger.net/web-security/os-command-injection/lab-simple    
    
# FLAG = c2098cad00958121da83a936845f41e7  


******************** 5.4 Уязвимости контроля доступа *********************
http://localhost:1337/
# сделать заказ
http://localhost:1337/receipt.php?orderID=2
# перейти на страницу http://localhost:1337/receipt.php?orderID=1 (меняем в конце 2 на 1)
http://localhost:1337/receipt.php?orderID=1
# FLAG = 4d08e6a8f673a9ba19cce9295585a5dc


******************** 5.5 Уязвимости разграничения доступа к каталогам ******
# FLAG = b181853c698ea9175d319561ae038433
#
Разбор техники

Ход действий

1. Загрузим основную страницу http://evil.corp:1337 и проанализируем запросы в BurpSuite, предварительно включив отображение картинок в фильтре:
5_5_1.png

2. Как видим, отображением картинок занимается скрипт image.php, а имя картинки передается через параметр file:
5_5_2.png

3. Отправим этот запрос в Repeater для дальнейшего анализа:
5_5_3.png

4. В этом режиме мы можем свободно редактировать запрос, вновь отправлять его серверу и получать результат. Для анализа изменим значение параметра file на некорректное, например, удалим последний символ из названия картинки:
5_5_4.png

5. Из сообщения об ошибке мы получим информацию о реальном пути до картинки на стороне сервера и расположении скрипта. Попробуем использовать абсолютный путь до файла, который точно должен быть на удаленной Linux-системе, например, /etc/hosts:
5_5_5.png

6. Эта попытка не сработала, потому что значение параметра file склеивается с путем до директории с картинками /var/www/html/static, что приводит к обращению к несуществующему файлу /var/www/html/static//etc/hosts. Мы можем попытаться выйти за пределы директории с картинками иным путем – используя относительные пути в Linux, где ./ обозначает текущую директорию, а ../ - директорию на уровень выше:
5_5_6.png
 

    Таким образом, с каждым ../ мы выходим на уровень выше из /var/www/html/static/, и путь /var/www/html/static/../../../../ становится эквивалентным пути к корневой директории /, что дает возможность обращаться к любым файлам в системе, например, к /etc/passwd.

# FLAG = b181853c698ea9175d319561ae038433



