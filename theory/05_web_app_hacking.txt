************************* 5.1 Введение *********************

# Основные понятия

Веб-приложение (Web application) —  клиент-серверное приложение, в котором клиент взаимодействует с веб-сервером при помощи браузера. Уязвимости веб-приложений возникают, когда разработчики допускают ошибки в коде. Это может происходить как на этапе разработки, так и на этапе доработки или исправления найденных ранее уязвимостей.  Также при разработке веб-сервиса может использоваться сторонний код, проверка которого требует отдельного внимания разработчиков. Существуют и другие причины небезопасных веб-приложений, некоторые из которых мы коснемся в курсе.

Идентификация (Identification)— это процедура определения и подтверждения субъекта идентификации (пользователя) через его идентификатор, однозначно определяющий его на основе предоставленных им данных, таких как имя, адрес электронной почты или номер телефона. Идентификация часто используется вместе с аутентификацией для подтверждения подлинности пользователя.

Аутентификация (Authentication) — это процедура проверки подлинности идентификационных данных пользователя, таких, как логин и пароль, чтобы убедиться, что он является тем, за кого себя выдает; по сути, процесс проверки конкретного пользователя или клиента путем сравнения введенного им пароля с паролем, сохраненным в базе данных.

Авторизация (Authorization) — это процесс проверки прав пользователя на выполнение определенных действий или доступ к определенным ресурсам системы. Пользователь может быть аутентифицирован, но не авторизован на выполнение определенной операции, если у него нет необходимых прав.

Атака грубой силы (Brute force) — это метод криптоанализа, при котором злоумышленник пытается взломать пароль или зашифрованные данные путем перебора возможных комбинаций до тех пор, пока не будет найдено правильное сочетание. Атака грубой силы может быть эффективной, если пароль короткий или используется слабый алгоритм шифрования, однако, при достаточной длине и сложности пароля, такая атака может занять слишком много времени или быть совсем неэффективной.

Инъекция команд ОС (OS Command Injection) (также известная как shell инъекция) — уязвимость веб-приложений, которая позволяет злоумышленнику выполнять произвольные команды операционной системы (ОС) на сервере, на котором запущено приложение, и, как правило, дает возможность полностью скомпрометировать приложение и все его данные.

    Очень часто злоумышленник может использовать уязвимость внедрения команд ОС для компрометации других частей инфраструктуры, используя доверительные отношения для перенаправления атаки на другие системы в организации.


Контроль доступа (Access control)— это процесс управления доступом пользователей к ресурсам системы, включая определение прав доступа и ограничений на использование ресурсов. Контроль доступа обеспечивает безопасность системы, ограничивая доступ пользователей только к необходимым ресурсам и операциям.

Язык структурированных запросов SQL (Structured Query Language) – это декларативный язык программирования для хранения и обработки информации в реляционной базе данных. Реляционная база данных хранит информацию в табличной форме со строками и столбцами, представляющими различные атрибуты данных и различные связи между значениями данных. Инструкции SQL можно использовать для хранения, обновления, удаления, поиска и извлечения информации из базы данных. Можно также использовать SQL для поддержания и оптимизации производительности базы данных.

SQL-инъекция (SQL injection)— это уязвимость веб-приложений, позволяющая злоумышленнику вмешиваться в запросы, которые приложение делает к своей базе данных. Она позволяет злоумышленнику просматривать данные, которые он, как правило, не может получить.

Обратный путь в каталогах (Path Traversal) (также известный как обход файловых путей) — это уязвимость веб-безопасности, позволяющая злоумышленнику читать произвольные файлы на сервере, на котором запущено приложение. Сюда могут входить код приложения и данные, учетные данные для внутренних систем и конфиденциальные файлы операционной системы.

Расширяемый язык разметки (XML) позволяет определять и хранить данные совместно используемым способом. XML поддерживает обмен информацией между компьютерными системами, такими, как веб-сайты, базы данных и сторонние приложения. Предопределенные правила упрощают передачу данных в виде XML-файлов по любой сети, поскольку получатель может использовать эти правила для точного и эффективного чтения данных.


Инъекция внешних сущностей XML (также известная как XXE) — это уязвимость веб-безопасности, позволяющая злоумышленнику вмешиваться в обработку XML-данных приложения. Часто она позволяет злоумышленнику просматривать файлы на файловой системе сервера приложений, а также взаимодействовать с любыми внутренними или внешними системами, к которым имеет доступ само приложение.

В большом числе случаев злоумышленник может усилить атаку XXE для компрометации основного сервера или другой внутренней инфраструктуры, используя уязвимость XXE для выполнения атак на подделку запроса на стороне сервера (SSRF).

Межсайтовый скриптинг (также известный как XSS) — это уязвимость веб-безопасности, позволяющая злоумышленнику компрометировать взаимодействие пользователей с уязвимым приложением. Она позволяет злоумышленнику обходить политику одного источника (Same Origin Policy (SOP)), которая предназначена для разделения различных веб сайтов друг от друга.



# Общие принципы

Для компрометации веб-приложений используются уязвимости, как правило, возникающие из-за допущенных ошибок при разработке (ошибки в коде, использование уязвимых библиотек и др.), в различных механизмах данного приложения . Такие ошибки часто складываются в целые группы типовых уязвимостей.

Примеры механизмов веб-приложений:

    Аутентификация
    Авторизация
    Менеджмент сессий
    Хранение файлов
    Работа с базами данных
    Генерация медиа (видео и изображений)
    Вывод пользовательских данных и др.


# Категории типовых уязвимостей

Типовые уязвимости сгруппированы как по механизмам, где они происходят, так и по характеру их эксплуатации, а также по технологиям, в которых они обнаруживаются.

Типовые уязвимости по механизмам, где они происходят:

     Уязвимости механизмов аутентификации
    Уязвимости механизмов авторизации
    Уязвимости загрузки файлов
    Уязвимости раскрытия информации
    Уязвимости в системах криптографии и др.

Типовые уязвимости по характеру их эксплуатации:

    Уязвимости состояния гонки (race condition)
    Уязвимости некорректной нейтрализации управляющих конструкций при генерации веб-страниц (атаки межсайтового скриптинга)
    Уязвимости подделки запроса со стороны сервера (SSRF)
    Уязвимости подделки запроса со стороны клиента (CSRF) и др.

Типовые уязвимости по технологиям, в которых они происходят:

    Уязвимости SQL инъекций
    Уязвимости внедрения внешних сущностей в XML-документы
    Уязвимости инъекций в ORM-запросах
    Уязвимости инъекций в LDAP-запросах
    Уязвимости инъекции команд или аргументов в запросах к терминальной оболочке ОС

    Категоризировать уязвимости можно по-разному. Важно то, что появляются все новые классы уязвимостей и атак вместе с ростом технологий и их применением в различных ситуациях. Обладая знанием типовых уязвимостей веб-приложений, можно эффективно искать и эксплуатировать возможности, предоставляемые приложением, для достижения целей проверки.

Мы рассмотрим несколько уязвимостей, возникающих на начальных этапах поиска возможностей компрометации веб-приложения и на заключительных этапах, когда полная компрометация приложения становится возможной.

На начальных этапах мы сталкиваемся с механизмами аутентификации и контроля доступа.

На заключительных этапах самым большим достижением в демонстрации возможности компрометации является демонстрация возможности выполнить произвольный код или команды ОС от имени веб-приложения.

https://owasp.org/www-project-top-ten/
https://portswigger.net/web-security/all-topics


********************* 5.2 Уязвимости обхода аутентификации ******************
Аутентификация, авторизация и идентификация

​​Существуют такие механизмы управления и защиты информации, как идентификация, авторизация и аутентификация.

    Идентификация — процедура, в результате выполнения которой для субъекта идентификации присваивается его идентификатор, однозначно определяющий этого субъекта в информационной системе.
    Аутентификация — процедура проверки подлинности, например проверка подлинности пользователя путем сравнения введенного им пароля с паролем, сохраненным в базе данных. Подтверждает, что он является тем, за кого себя выдает. 
    Авторизация — предоставление определенному лицу или группе лиц прав на выполнение определенных действий. Эта процедура проверяет есть ли права у пользователя на исполнение запрашиваемых им операций.
    Многофакторная аутентификация — это аутентификация, при выполнении которой используется не менее двух различных факторов аутентификации.
    OTP (One-Time Password) — это способ аутентификации, при котором пользователь получает пароль, доступный только для одного сеанса входа или одной транзакции в информационной системе или приложении. В основу OTP заложен принцип, что генерируемый пароль действителен для одной сессии.

Классифицировать различные типы проверки подлинности можно по трем факторам:

    Знание, например, пароль или ответ на вопрос безопасности, одноразовый код. Их иногда называют факторами знаний.
    Обладание, то есть физический объект, такой как мобильный телефон или маркер безопасности - магнитная карта. Их иногда называют факторами владения.
    Биометрия, например, персональные данные или модели поведения - конфиденциальная информация. Их иногда называют факторами согласованности.

Механизмы аутентификации полагаются на целый ряд технологий для проверки одного или нескольких из этих факторов.

# Как возникают и какой ущерб несут уязвимости аутентификации
Как возникают уязвимости аутентификации?

В широком смысле, большинство уязвимостей в механизмах аутентификации возникает одним из двух способов:

    Механизмы аутентификации уязвимы, так как они не могут адекватно защитить от атак с применением методов грубой силы.
    Логические ошибки или плохой код в реализации позволяют злоумышленнику полностью обойти механизмы аутентификации.

Какой ущерб несут уязвимости аутентификации?

Влияние уязвимостей аутентификации может быть очень серьезным: после того, как злоумышленник либо обошел аутентификацию, либо взломал учетную запись другого пользователя, он получает доступ ко всем данным и функциональности, которыми обладает скомпрометированная учетная запись.

Если злоумышленнику удается скомпрометировать высокопривилегированную учетную запись, например, системного администратора, он может получить полный контроль над всем приложением и потенциально получить доступ к внутренней инфраструктуре.

Даже компрометация низкопривилегированной учетной записи все равно может предоставить злоумышленнику доступ к данным, которые, в противном случае, не должны были бы быть у него: например, к коммерческой информации.

Даже если учетная запись не имеет доступа к конфиденциальным данным, она все равно может позволить злоумышленнику получить доступ к дополнительным страницам, которые обеспечивают дополнительную поверхность атаки. Часто некоторые атаки с высокой степенью вероятности будут невозможны с общедоступных страниц, но они могут быть возможны и с приватной страницы.

# 
Уязвимости в механизмах аутентификации

Система аутентификации веб-сайта, как правило, состоит из нескольких различных механизмов, в которых могут возникать уязвимости. Некоторые уязвимости широко применимы во всех этих контекстах, в то время как другие более специфичны с точки зрения предоставляемой функциональности.

Рассмотрим более подробно некоторые из наиболее распространенных уязвимостей в следующих областях:

    Уязвимости при входе на основе пароля
    Уязвимости при многофакторной аутентификации
    Уязвимости в других механизмах аутентификации

Уязвимости в Password-based аутентификации

Для веб-сайтов, использующих процесс входа на основе пароля, пользователи либо сами регистрируются для получения учетной записи, либо администратор присваивает им учетную запись. Эта учетная запись связана с уникальным именем пользователя и секретным паролем, который пользователь вводит в форме входа для аутентификации.

В этом сценарии сам факт знания секретного пароля воспринимается как достаточное доказательство личности пользователя. Следовательно, безопасность сайта будет скомпрометирована, если злоумышленник сможет либо получить, либо угадать учетные данные другого пользователя.

Уязвимости в этом механизме возникают по различным причинам, одни из них:

    Возможные brute-force атаки
    Уязвимая защита от brute-force атак
    HTTP-basic аутентификация


# Brute-force атаки
Brute-forcing пользовательских имен

Имена пользователей особенно легко угадать, если они соответствуют узнаваемому шаблону, например, адресу электронной почты. Очень часто можно увидеть логины в формате:

firstname.lastname@somecompany.com

Однако, даже если нет очевидного шаблона, иногда даже высокопривилегированные учетные записи создаются с использованием предсказуемых имен пользователей, таких как admin или administrator.
Brute-forcing паролей

Пароли могут быть перебраны аналогичным образом в зависимости от сложности пароля. Многие сайты принимают ту или иную форму политики паролей, которая заставляет пользователей создавать пароли с высокой энтропией, которые, по крайней мере, теоретически сложнее взломать одним перебором. Обычно это включает в себя принудительное использование в паролях:

    Минимального количества символов
    Смеси строчных и заглавных букв
    Как минимум одного специального символа

Однако, несмотря на то, что высокоэнтропийные пароли сложно взломать компьютеру, мы можем использовать базовые знания о человеческом поведении для эксплуатации уязвимостей, которые пользователи невольно привносят в эту систему.

Вместо того, чтобы создавать надежный пароль со случайной комбинацией символов, пользователи часто берут пароль, который они могут запомнить, и пытаются использовать его в соответствие с политикой паролей. Например, если не разрешено использование password, пользователи могут попробовать что-нибудь вроде P@ssw0rd или P4$$w0rd!.

Такое знание предсказуемых закономерностей означает, что атаки с применением грубой силы часто могут быть гораздо более изощренными и, следовательно, более эффективными, чем простые итерации через всевозможные комбинации символов.
Уязвимая защита от brute-force атак

Высока вероятность того, что атака с применением грубой силы будет включать в себя множество неудачных попыток, прежде чем атакующий успешно скомпрометирует учетную запись. По логике вещей, защита полным перебором заключается в попытке замедлить скорость автоматизации ввода пароля, с которой злоумышленник может попытаться войти в систему.

Двумя наиболее распространенными способами предотвращения атак полным перебором являются следующие:

    Блокировка учетной записи, к которой удаленный пользователь пытается получить доступ, если он совершает слишком много неудачных попыток входа.
    Блокировка IP-адреса удаленного пользователя, если он делает слишком много попыток входа в систему.

    Оба подхода предлагают разную степень защиты, но ни один из них не является неуязвимым, особенно если он реализуется с использованием ошибочной логики.

Иногда вы можете обнаружить, что ваш IP заблокирован, если вы не можете войти слишком много раз. В некоторых реализациях счетчик количества неудачных попыток сбрасывается при успешном входе владельца IP-адреса. Это означает, что злоумышленнику просто придется входить в систему под своей учетной записью каждые несколько попыток, чтобы этот лимит никогда не был достигнут.

В этом случае достаточно просто включать свои собственные учетные данные для входа в систему через регулярные интервалы времени в течение перебора всего словаря, чтобы сделать эту защиту практически бесполезной.

# Basic-аутентификация HTTP

Несмотря на то, что эта аутентификация достаточно старая, ее относительная простота и легкость реализации ведет к тому, что можно достаточно часто видеть использование базовой аутентификации по HTTP.

При базовой HTTP-аутентификации клиент получает от сервера маркер аутентификации, который строится путем сцепления имени пользователя и пароля, а также их кодировки в Base64. Этот токен хранится и управляется браузером, который автоматически добавляет его в заголовок авторизации каждого последующего запроса следующим образом:

Authorization: Basic base64(username:password)

    По ряду причин это, как правило, не считается безопасным методом аутентификации.

Во-первых, он включает в себя многократную отправку учетных данных пользователя при каждом запросе. Если на веб-сайте также не реализована HSTS, учетные данные пользователя могут быть перехвачены в ходе атаки типа Man-in-the-Middle (человек посередине).

Кроме того, реализация базовой аутентификации HTTP часто не поддерживает защиту от переборов грубой силы. Поскольку токен состоит исключительно из статических значений, это может сделать его уязвимым для перебора.

Базовая аутентификация HTTP также особенно уязвима к атакам, связанным с сеансом, в частности к CSRF, от которых она сама по себе не обеспечивает никакой защиты.

В некоторых случаях использование уязвимой базовой HTTP-аутентификации может дать злоумышленнику доступ только к, казалось бы, неинтересной странице. Однако, в дополнение к обеспечению дополнительной поверхности атаки, учетные данные, раскрытые таким образом, могут быть повторно использованы в других, более конфиденциальных контекстах.
Уязвимости мультифакторной аутентификации

Многие веб-сайты полагаются исключительно на однофакторную аутентификацию с использованием пароля для аутентификации пользователей. Однако некоторые требуют от пользователей подтверждения их личности с помощью нескольких факторов аутентификации.

Проверка биометрических факторов является непрактичной для большинства веб сайтов. Однако все чаще встречается обязательная и необязательная двухфакторная аутентификация (2FA), основанная на том, что вы знаете и что у вас есть. Это
обычно требует от пользователей ввода как традиционного пароля, так и временного верификационного кода со стороннего физического устройства, находящегося у них в распоряжении.

Хотя иногда злоумышленник может получить один фактор, основанный на знаниях, например, пароль, вероятность одновременного получения другого фактора из стороннего источника значительно ниже. По этой причине двухфакторная аутентификация явно более безопасна, чем однофакторная. Однако, как и любая другая мера безопасности, она безопасна настолько, насколько и ее реализация. Плохо реализованную двухфакторную аутентификацию можно обойти частично или даже полностью, точно так же, как и однофакторную аутентификацию.

    Следует также отметить, что все преимущества многофакторной аутентификации достигаются только путем проверки множества различных факторов. Проверка одного и того же фактора двумя разными способами не является истинной двухфакторной аутентификацией.

    Одним из таких примеров является 2FA через электронную почту. Хотя пользователь должен предоставить пароль и проверочный код, доступ к коду предполагается на основе того, что пользователь знает учетные данные для входа в свою учетную запись электронной почты. Поэтому фактор проверки подлинности знания просто проверяется дважды.

Обход двухфакторной аутентификации возможен по разным причинам:

    Иногда реализация двухфакторной аутентификации бывает настолько несовершенной, что ее можно обойти полностью.
    Иногда ошибочная логика двухфакторной аутентификации означает, что после того, как пользователь выполнил начальный шаг входа в систему, веб-сайт не может адекватно проверить, что этот же пользователь выполняет второй шаг.
    А также, как и в случае с паролями, веб-сайты должны принимать меры по предотвращению перебора проверочного кода 2FA. Это особенно важно, потому что код часто представляет собой простое 4-х или 6-значное число. Без адекватной защиты взлом такого кода тривиален.

Уязвимости механизмов смены пароля, восстановления пароля, поддержания сессии

В дополнение к базовой функциональности входа в систему, большинство сайтов предоставляют дополнительные функциональные возможности, позволяющие пользователям управлять своей учетной записью. Например, пользователи обычно могут изменить свой пароль или сбросить его, когда они его забудут. Эти механизмы также могут добавлять уязвимости, которые могут быть использованы злоумышленником.

    Веб-сайты, как правило, стараются избежать известных уязвимостей на своих страницах входа. Однако легко упустить из виду тот факт, что необходимо предпринять аналогичные шаги, чтобы убедиться в том, что связанная с ними функциональность не менее надежна. Это особенно важно в тех случаях, когда злоумышленник может создать свою учетную запись и, следовательно, имеет легкий доступ к изучению этих дополнительных страниц.

Сторонние механизмы аутентификации, которые также могут быть уязвимы:

    Механизм поддержания сессии «запомнить меня»
    Механизм сброса пароля через E-mail
    Механизм сброса пароля с использованием URL и одноразового токена
    Механизм смены пароля


# 
Материалы для самостоятельного изучения

    Серия нерегулярного подкаста с обсуждением основных атак на аутентификацию и угон аккаунтов https://t.me/cybersec_in_russian/5
    OWASP-памятка по реализации механизмов аутентификации https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Authentication_Cheat_Sheet.md

Тренироваться на упражнениях можно на открытых платформах. Одна из лучших платформ по изучению проблем безопасности веб-приложений: PortSwigger Academy. https://portswigger.net/web-security/authentication/password-based/lab-username-enumeration-via-different-responses

    Попрактикуемся в атаках на аутентификацию https://portswigger.net/web-security/authentication/password-based/lab-username-enumeration-via-different-responses

 

Так же настоятельно рекомендуем ознакомится с различными инструментами, используемыми для брутфорсинга (hydra, medusa, patator и др.):

    https://www.kali.org/tools/hydra/
    https://www.kali.org/tools/medusa/
    https://www.kali.org/tools/patator/
    

***************************** 5.3 Уязвимости инъекции команд ОС ******************
# Уязвимости инъекции команд ОС

Инъекция команд ОС (также известная как shell инъекция) является уязвимостью веб-приложений, которая позволяет злоумышленнику выполнять произвольные команды операционной системы (ОС) на сервере, на котором запущено приложение, и, как правило, дает возможность полностью скомпрометировать приложение и все его данные. Очень часто злоумышленник может использовать уязвимость внедрения команд ОС для компрометации других частей инфраструктуры, используя доверительные отношения для перенаправления атаки на другие системы в организации.

# 
Как возникают уязвимости инъекции команд?

Пример допущенной уязвимости инъекции команд:

$command = 'convert -pointsize 72 label:Hello ' . $_FILES['userfile']['name'];
 system($command);

В примере выше имя файла попадает прямо в строку исполнения, которая в последствии будет выполнена терминальной оболочкой. Это позволяет дописать дополнительные команды терминальной оболочки и воспользоваться этим недостатком.

Пример эксплуатации для уязвимости выше:

------WebKitFormBoundaryePkpFF7tjBAqx29L
Content-Disposition: form-data; name="userfile"; filename="check | ls -la;"
Content-Type: application/x-object

... contents of file goes here ...

Зачастую эксплуатация подобного рода уязвимостей затруднена и требует поиска возможностей выполнения кода через другие “контексты” и технологии.

Например, выполнение команд возможно в ряде других уязвимостей, которые, прежде чем получить возможность выполнить произвольную команду, надо найти и проэксплуатировать.
К подобным уязвимостям относятся:

    Уязвимости небезопасной десериализации
    Уязвимости внедрения шаблонов на стороне сервера SSTI
    Уязвимости SQL инъекции
    Уязвимости переполнения буфера / кучи / стека
    Множественные случаи проблем и ошибок реализации, возникающих при работе с запуском процессов и работе с терминальной оболочкой


# Ход действий

1. Проэксплуатируем уязвимость Command Injection в панели администратора:
Рисунок 5_3_1.png
    Эта страница выводит список процессов в контейнере, можно предположить, что он получается с помощью выполнения Linux-команды ps.

2. Пользователь может контролировать вывод с помощью веб-формы, например, можно выдать информацию только о процессах apache2:
5_3_2.png

3. Внедрим символ “;”, являющийся разделителем команд в Linux после названия процесса, и добавим в конец ещё одну команду, “ls”:
5_3_3.png

Таким образом, мы смогли выполнить свой код на удаленной машине.

4. Проведем базовую разведку, используя следующие команды:

    Показать текущую директорию: > pwd

    Показать текущего пользователя: > id

    Показать переменные окружения: > export

    Для удобства можем использовать пайп “|” в качестве разделителя команд. Так вывод команды ps будет проигнорирован, т.к. он пойдет на вход запускаемой нами команде, поэтому мы получим только результат вывода нашей команды.

# 
Материалы для самостоятельного изучения

     Пример уязвимости инъекции команд ОС https://portswigger.net/web-security/os-command-injection/lab-simple


************** 5.4 Уязвимости контроля доступа ************************
# Уязвимости контроля доступа

Что такое контроль доступа?

В контексте веб-приложений контроль доступа зависит от аутентификации и управления сеансами:

    Аутентификация идентифицирует пользователя и подтверждает, что он является тем, за кого себя выдает.
    Управление сеансом идентифицирует, какие последующие HTTP-запросы выполняются тем же самым пользователем.
    Управление доступом определяет, разрешено ли пользователю выполнять действия, которые он пытается выполнить.

Сломанный контроль доступа является часто встречающейся и часто критической уязвимостью безопасности. Проектирование и управление контролем доступа — это сложная и динамичная проблема, которая применяет деловые, организационные и правовые ограничения к технической реализации. Проектные решения по контролю доступа должны приниматься людьми, а не технологиями, и вероятность ошибок высока.

# 
Пример техники

В качестве примера вы можете создать заказ на сайте лабораторного стенда. После создания заказа вы будете перенаправлены на страницу с информацией о нем. Адрес этой станицы будет вида http://localhost:1337/receipt.php?orderID=3, где 3 — это номер вашего заказа.

Вы можете попробовать нарушить контроль доступа и обратиться к заказам с другими номерами, если система уязвима — вы увидите данные о заказе который не принадлежит вам, а там отображаются персональные данные другого пользователя.

        Обычно номера заказов идут по возрастающей, следовательно скорее всего есть заказы с номером меньше вашего, но нету с номером больше вашего.
        При запуске сайта первые заказы обычно создают для теста владельцы сайта и если эти заказы не были удалены, то там могут оказаться контактные данные администратора сайта.

Таким образом, вы получите доступ к данным, которые вам не предназначались, и обнаружите уязвимость контроля доступа в лабораторном стенде.


# Категории контроля доступа

С точки зрения пользователя, контроль доступа можно разделить на следующие категории:

    Вертикальный контроль доступа.
    Горизонтальный контроль доступа.
    Контекстно-зависимый контроль доступа.

Вертикальный контроль доступа

Вертикальный контроль доступа — это механизмы, ограничивающие доступ к чувствительным функциям, недоступным другим типам пользователей. С помощью вертикальных средств контроля доступа различные типы пользователей имеют доступ к различным функциям приложений. Например, администратор может изменить или удалить учетную запись любого пользователя, в то время как обычный пользователь не имеет доступа к этим действиям. Вертикальные средства контроля доступа могут быть более тонкой реализацией моделей безопасности, разработанных для внедрения бизнес-политик, таких, как разделение обязанностей и наименьших привилегий.
Пример уязвимостей IFLAC

Insecure Function Level Access Control (IFLAC) — это подкатегория уязвимостей контроля доступа. Уязвимый контроль доступа функционального уровня может позволить злоумышленникам получить доступ к несанкционированным для роли злоумышленника функциям. Административные функции являются основной целью данного типа атак.

Данная уязвимость возникает, когда приложение публикует функциональный интерфейс (например, API), в котором не проверяется уровень доступа для обращения к определенным в интерфейсе функциям. В таком случае злоумышленник может вызывать функции приложения, которые дают ему привилегии, не задуманные для использования уровнем роли злоумышленника.

Примером может послужить возможность обращения к вызову функции удаления пользователя, в то время как доступ в административную панель для низкопривилегированного пользователя формально закрыт. Т.е. пользователь не может открыть кабинет администратора, но может выполнить запрос к методу API, который будет успешно выполнен.

# Горизонтальный контроль доступа

Горизонтальный контроль доступа — это механизмы, ограничивающие доступ к ресурсам для пользователей, которым специально разрешен доступ к этим ресурсам.

С помощью горизонтального контроля доступа различные пользователи имеют доступ к подмножеству ресурсов одного и того же типа. Например, банковское приложение позволит пользователю просматривать транзакции и осуществлять платежи со своих счетов, но не со счетов любого другого пользователя.
Пример уязвимостей IDOR

Небезопасные прямые ссылки на объекты (IDOR) — это также подкатегория уязвимостей контроля доступа. IDOR возникает, когда приложение использует пользовательский ввод для прямого доступа к объектам, а злоумышленник может модифицировать ввод для получения несанкционированного доступа. Он был популярен своим появлением в OWASP TOP 10 2007, хотя это лишь один из примеров многих ошибок в реализации, которые могут привести к обходу контроля доступа.

Рассмотрим сайт, который использует следующий URL для доступа к странице учетной записи клиента, извлекая информацию из внутренней базы данных:
https://insecure-website.com/customer_account?customer_number=132355

Здесь номер клиента используется непосредственно как индекс записи в запросах, которые выполняются на внутренней базе данных. Если другие элементы управления отсутствуют, злоумышленник может просто изменить значение параметра customer_number, минуя элементы управления доступом для просмотра записей других клиентов. Это пример уязвимости IDOR, приводящей к горизонтальному повышению привилегий.

Атакующий может выполнить горизонтальное и вертикальное повышение привилегий, изменяя пользователя на пользователя с дополнительными привилегиями в обход элементов управления доступом. Другие возможности включают в себя, например, использование утечки пароля или изменение параметров после того, как злоумышленник попал на страницу учетной записи пользователя.

# Контроль доступа в местах, зависящих от бизнес-логики

Контекстно-зависимые элементы управления доступом ограничивают доступ к функциональности и ресурсам в зависимости от состояния приложения или взаимодействия с ним пользователя, а также препятствуют выполнению пользователем действий в неправильном порядке. Например, веб-сайт розничной торговли может помешать пользователю изменить содержимое корзины после того, как он произвел оплату.
Как исключать возникновение уязвимостей контроля доступа?

Уязвимости контроля доступа, как правило, можно предотвратить, применяя глубокий подход к защите и следуя следующим принципам:

  - Никогда не полагайтесь только на обфускацию для контроля доступа.
  - Если ресурс не предназначен для публичного доступа, запретите доступ по умолчанию.
  - Где это возможно, используйте единый прикладной механизм для обеспечения контроля доступа.
  - На уровне кода сделайте обязательным для разработчиков объявление доступа, разрешенного для каждого ресурса, и запретите доступ по умолчанию.
  - Тщательно проверяйте и тестируйте средства контроля доступа, чтобы убедиться, что они работают так, как задумано.
  - Регистрируйте сбои контроля доступа и уведомляйте администраторов при необходимости (например, если сбои повторяются).
  - Ограничивайте частоту доступа к API и контроллерам для минимизации ущерба от инструментов автоматизации атак.

# Материалы для самостоятельного изучения

    Вертикальный контроль доступа:

        Пример: "http://web.site/admin/deleteUser?username=jack"

        Примеры с HackerOne https://hackerone.com/reports/502593
    Горизонтальный контроль доступа:
        Примеры с HackerOne:
            IDOR в DoD https://hackerone.com/reports/1004745
            IDOR в магазине https://hackerone.com/reports/287789


http://localhost:1337/receipt.php?orderID=2


**************** 5.5 Уязвимости разграничения доступа к каталогам ************
# Уязвимости разграничения доступа к каталогам

Манипуляция путем к каталогам (также известный как обход файловых путей, англ. Path Traversal или Directory Traversal) – это уязвимость веб-безопасности, позволяющая злоумышленнику читать произвольные файлы на сервере, на котором запущено приложение. Сюда могут входить код приложения и данные, учетные данные для внутренних систем и конфиденциальные файлы операционной системы. В некоторых случаях злоумышленник может записать в произвольные файлы на сервере, что позволит ему изменить данные или поведение приложения, и, в конечном счете, получить полный контроль над сервером.
Почему такие уязвимости появляются?

Уязвимости Directory Traversal появляются из-за отсутствия валидации входных данных пользователя, а также из-за отсутствия разграничения доступа приложения или функции на возможность обращаться к файловым ресурсам всего сервера.

Пример уязвимого кода:

<?php
$template = 'red.php';
if (isset($_COOKIE['TEMPLATE'])) {
    $template = $_COOKIE['TEMPLATE'];
}
include "/home/users/phpguru/templates/" . $template;

В данном примере мы видим, что функция include подключает файлы из директории /home/users/phpguru/templates/ , имена которых отправил пользователь в своих Cookie данных на сервер. В таком случае пользователь может изменить отправляемые им данные и добавить в данные отправляемые на сервер строку ../../../../../etc/passwd .  В таком случае, сервер выполнит запрос к файлу по адресу /home/users/phpguru/templates/../../../../../etc/passwd , что в конечном итоге превратиться в обращение к файлу /etc/passwd, и предоставит возможность чтения пользователю системных файлов ОС, к которым он не должен был иметь доступа.


# Пример эксплуатации уязвимости

Чтение файлов при помощи Directory traversal

Рассмотрим торговое приложение, которое отображает изображения предметов для продажи. Изображения загружаются через некоторый HTML, как показано ниже:
<img src="/loadImage?filename=218.png">

URL loadImage принимает параметр имени файла и возвращает содержимое указанного файла. Сами файлы образов хранятся на диске в каталоге /var/www/images/. Чтобы вернуть образ, приложение добавляет запрашиваемое имя файла в этот базовый каталог и использует API файловой системы для чтения содержимого файла. В описанном выше случае приложение
читает по следующему пути к файлу: /var/www/images/218.png

Приложение не реализует защиту от атак обхода директорий, поэтому злоумышленник может запросить следующий URL для получения произвольного файла из файловой системы сервера:
https://insecure-website.com/loadImage?filename=../../../etc/passwd

Это приводит к тому, что приложение читает по следующему пути к файлу:
/var/www/images/../../../etc/passwd

Последовательность ../ действительна внутри пути к файлу и означает повышение на один уровень в структуре каталога. Три последовательных ../  идут вверх от /var/www/images/ до корня файловой системы, и, таким образом, до файла, который действительно читается: /etc/passwd

В операционных системах на базе Unix это стандартный файл, содержащий информацию о пользователях, зарегистрированных на сервере.

В Windows, как  ../, так и  ..\ являются действительными последовательностями обхода директорий, и эквивалентной атакой для получения стандартного файла операционной системы была бы атака:
https://insecure-website.com/loadImage?filename=..\..\..\windows\win.ini.

# 
Материалы для самостоятельного изучения

    Как избегать уязвимостей Directory Traversal https://wiki.owasp.org/index.php/File_System#Path_traversal
    PayloadsAllTheThings - Directory Traversal https://github.com/swisskyrepo/PayloadsAllTheThings/tree/master/Directory%20Traversal
    Пример проблемы https://portswigger.net/web-security/file-path-traversal/lab-simple

Примеры с HackerOne:

    PTrav в Node.js https://hackerone.com/reports/311216
    PTrav в GitLab https://hackerone.com/reports/827052


******************** 5.6 Уязвимости SQL-инъекции **************************
# Уязвимости SQL-инъекции

Что такое SQL?

Язык структурированных запросов (SQL) – это язык программирования для хранения и обработки информации в реляционной базе данных. Реляционная база данных хранит информацию в табличной форме со строками и столбцами, представляющими различные атрибуты данных и различные связи между значениями данных. Инструкции SQL можно использовать для хранения, обновления, удаления, поиска и извлечения информации из базы данных. Можно также использовать SQL для поддержания и оптимизации производительности базы данных.
Что такое SQL инъекция?

SQL-инъекция – это уязвимость веб-приложений, позволяющая злоумышленнику вмешиваться в запросы, которые приложение делает к своей базе данных. Она позволяет злоумышленнику просматривать данные, которые он, как правило, не может получить. Сюда могут входить данные, принадлежащие другим пользователям, или любые другие данные, к которым само приложение может получить доступ. Во многих случаях злоумышленник может изменять или удалять эти данные, вызывая постоянные изменения содержимого или поведения приложения.

В некоторых ситуациях злоумышленник может эскалировать атаку SQL-инъекции, чтобы скомпрометировать сервер или другую внутреннюю инфраструктуру, или выполнить атаку типа "отказа в обслуживании".
Какой ущерб несут уязвимости к инъекции SQL?

    Успешная атака SQL-инъекции может привести к несанкционированному доступу к конфиденциальным данным, таким, как пароли, данные кредитной карты или личная информация пользователя. Многие громкие утечки данных в последние годы стали результатом атак SQL-инъекции, что привело к репутационному ущербу и штрафам со стороны регулирующих органов. В некоторых случаях злоумышленник может получить постоянный «черный ход» в системы организации, что приводит к долгосрочному закреплению злоумышленника в инфраструктуре, которое может оставаться незамеченным длительный
    период времени.

В частности, уязвимости SQL-инъекций могут приводить к:

  - Извлечению данных и возможности исследования базы данных
  - Модификации информации в базе данных (удалению, добавлению, изменению)
  - Обходу логики
  - Обходу механизмов авторизации и аутентификации
  - Чтению файлов ОС
  - Выполнению команд ОС
  - Отказу в обслуживании


